name: Build and Release

on:
  release:
    types: [created]
  push:

permissions:
  contents: write
  discussions: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            output_name: minecraft-schematic-generator.exe
            torch_index: cpu
            cuda: false
          - os: ubuntu-latest
            output_name: minecraft-schematic-generator-linux
            torch_index: cpu
            cuda: false
          - os: macos-latest
            output_name: minecraft-schematic-generator-mac
            torch_index: cpu
            cuda: false
          - os: windows-latest
            output_name: minecraft-schematic-generator.exe
            torch_index: cu124
            cuda: true
          - os: ubuntu-latest
            output_name: minecraft-schematic-generator-linux
            torch_index: cu124
            cuda: true
          - os: ubuntu-latest
            output_name: minecraft-schematic-generator-termux
            torch_index: cpu
            cuda: false
            termux: true

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Setup cross-compilation environment
        if: matrix.termux
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          sudo apt-get install -y crossbuild-essential-arm64
          sudo apt-get install -y python3-pip python3-dev
          sudo apt-get install -y patchelf

      - name: Install PyTorch
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ "${{ matrix.termux }}" = "true" ]; then
            export PYTHONNOUSERSITE=1
            pip install torch==2.6.0+cpu --index-url https://download.pytorch.org/whl/cpu
          else
            pip install torch --index-url https://download.pytorch.org/whl/${{ matrix.torch_index }}
          fi

      - name: Install PyInstaller and dependencies
        run: |
          pip install -e .[server]
          pip install pyinstaller ${{ matrix.cuda && 'huggingface_hub' || '' }}

      - name: Generate version file
        shell: bash
        run: |
          VERSION=${{ github.ref_name }}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "# This file is auto-generated during build" > src/minecraft_schematic_generator/version.py
          echo "__version__ = \"${VERSION}\"" >> src/minecraft_schematic_generator/version.py
          echo "GITHUB_REPO = \"mmmfrieddough/minecraft-schematic-generator\"" >> src/minecraft_schematic_generator/version.py

      - name: Build binary termux
        shell: bash
        if: ${{ matrix.termux }}
        run: |
          # Cross-compilation configuration for Termux/Android ARM64
          export TERMUX_BUILD=1
          mkdir -p termux_build termux_dist hooks

          # Configure cross-compilation environment variables
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export AR=aarch64-linux-gnu-ar
          export RANLIB=aarch64-linux-gnu-ranlib
          export READELF=aarch64-linux-gnu-readelf
          export STRIP=aarch64-linux-gnu-strip
          export OBJCOPY=aarch64-linux-gnu-objcopy
          export OBJDUMP=aarch64-linux-gnu-objdump
          export LD=aarch64-linux-gnu-ld

          export CFLAGS="-fPIC"
          export CXXFLAGS="-fPIC"
          export LDFLAGS="-pie"
          export TARGET_ARCH=aarch64
          export TARGET_OS=android
          export PYTHONPATH=$(pwd)
          cat <<-EOF | sudo tee /etc/apt/sources.list.d/arm64.list >/dev/null
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-updates main restricted
          deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports/ jammy-security main restricted
          EOF

          
          # Install cross-compilation dependencies
          sudo dpkg --add-architecture arm64
          sudo apt-get update
          sudo apt-get install -y \
            libc6:arm64 \
            libpython3.12:arm64 \
            zlib1g:arm64 \
            libbz2-1.0:arm64

          # Build using custom spec file
          PYTHONPATH=hooks pyinstaller \
            --clean \
            --workpath termux_build \
            --distpath termux_dist \
            --additional-hooks-dir=hooks \
            termux.spec

          # Verify the binary architecture
          echo "Checking binary architecture:"
          file termux_dist/minecraft-schematic-generator-termux || true
      - name: Build binary normal
        shell: bash
        if: ${{ !matrix.termux }}
        run: |
            pyinstaller --onefile \
              --name ${{ matrix.output_name }} \
              --copy-metadata safetensors \
              --collect-data minecraft_schematic_generator \
              app/main.py

      - name: Upload artifact
        if: ${{ !matrix.cuda }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: ${{ matrix.termux && 'termux_dist' || 'dist' }}/${{ matrix.output_name }}

  create-release-tag:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            ## Download Options
            
            ### CUDA Version (Recommended)
            For optimal performance on Windows and Linux, download the CUDA-enabled version (hosted on Hugging Face due to file size limits):
            - [Windows CUDA](https://huggingface.co/mmmfrieddough/minecraft-schematic-generator/resolve/${{ github.ref_name }}/binaries/minecraft-schematic-generator.exe)
            - [Linux CUDA](https://huggingface.co/mmmfrieddough/minecraft-schematic-generator/resolve/${{ github.ref_name }}/binaries/minecraft-schematic-generator-linux)
            
            **Note:** CUDA version requires an NVIDIA GPU but provides significantly faster inference.
            
            ### CPU Version
            For macOS systems (best performance on Apple Silicon):
            - [macOS](dist/minecraft-schematic-generator-mac/minecraft-schematic-generator-mac)
            
            CPU versions for Windows/Linux are available but not recommended due to extremely slow inference times:
            - [Windows CPU](dist/minecraft-schematic-generator.exe/minecraft-schematic-generator.exe)
            - [Linux CPU](dist/minecraft-schematic-generator-linux/minecraft-schematic-generator-linux)
            
            ### Android/Termux Version
            - [Termux ARM64](dist/minecraft-schematic-generator-termux/minecraft-schematic-generator-termux)
            
            ## System Requirements
            - Windows/Linux: NVIDIA GPU strongly recommended
            - macOS: Apple Silicon recommended for best performance
            - Android: ARM64 device running Termux
            
            ## Server Configuration
            The server can be started with:
            ```bash
            ./minecraft-schematic-generator [options]
            ```
            
            By default, it will run on http://localhost:8000
          draft: false
          prerelease: false
          files: |
            dist/minecraft-schematic-generator*/minecraft-schematic-generator*
        env:
          GITHUB_TOKEN: ${{ secrets.GIT }}

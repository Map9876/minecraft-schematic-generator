name: Build and Release

on:
  release:
    types: [created]
  push:

permissions:
  contents: write
  discussions: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            output_name: minecraft-schematic-generator.exe
            torch_index: cpu
            cuda: false
          - os: ubuntu-latest
            output_name: minecraft-schematic-generator-linux
            torch_index: cpu
            cuda: false
          - os: macos-latest
            output_name: minecraft-schematic-generator-mac
            torch_index: cpu
            cuda: false
          - os: windows-latest
            output_name: minecraft-schematic-generator.exe
            torch_index: cu124
            cuda: true
          - os: ubuntu-latest
            output_name: minecraft-schematic-generator-linux
            torch_index: cu124
            cuda: true
            
          - os: ubuntu-latest            
            output_name: minecraft-schematic-generator-termux 
            torch_index: cpu 
            cuda: false 
            termux: true  # 新增自定义标识 
    

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Setup cross-compilation environment  # ⬅️ NEW start
        if: matrix.termux 
        run: |
          sudo apt-get update 
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu 
          sudo ln -s /usr/bin/aarch64-linux-gnu-gcc /usr/bin/aarch64-linux-gnu-gcc-12 
 
      - name: Install PyTorch 
        shell: bash
        run: |
        
          python -m pip install --upgrade pip 
          if [ "${{ matrix.termux }}" = "true" ]; then 
            pip install torch==2.3.0+cpu --index-url https://download.pytorch.org/whl/${{ matrix.torch_index }}
          else 
            pip install torch --index-url https://download.pytorch.org/whl/${{ matrix.torch_index }}
          fi           
         #   ⬅️ NEW end
         
         
      - name: Install PyTorch
        run: |
          python -m pip install --upgrade pip
          pip install torch --index-url https://download.pytorch.org/whl/${{ matrix.torch_index }}

      - name: Install PyInstaller and dependencies
        run: |
          pip install -e .[server]
          pip install pyinstaller ${{ matrix.cuda && 'huggingface_hub' || '' }}

      - name: Generate version file
        run: |
          VERSION=${{ github.ref_name }}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "# This file is auto-generated during build" > src/minecraft_schematic_generator/version.py
          echo "__version__ = \"${VERSION}\"" >> src/minecraft_schematic_generator/version.py
          echo "GITHUB_REPO = \"mmmfrieddough/minecraft-schematic-generator\"" >> src/minecraft_schematic_generator/version.py

# Remove the first Build binary step since it's duplicated
      - name: Build binary
        shell: bash
        run: |
          if [ "${{ matrix.termux }}" = "true" ]; then 
            # Cross-compilation configuration for Termux
            export CC=aarch64-linux-gnu-gcc 
            export CXX=aarch64-linux-gnu-g++
            pyinstaller --onefile \
              --name ${{ matrix.output_name }} \
              --target-arch arm64 \
              --copy-metadata safetensors \
              --collect-data minecraft_schematic_generator \
              --workpath build-termux \
              --specpath termux_spec \
              --distpath termux_dist \
              app/main.py 
          else 
            pyinstaller --onefile \
              --name ${{ matrix.output_name }} \
              --copy-metadata safetensors \
              --collect-data minecraft_schematic_generator \
              app/main.py 
          fi 

      # Single Upload artifact step that handles both Termux and non-Termux cases
      - name: Upload artifact
        if: ${{ !matrix.cuda }}  # Only upload non-CUDA artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}
          path: ${{ matrix.termux && 'termux_dist' || 'dist' }}/${{ matrix.output_name }}

  create-release-tag:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"



  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: dist

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            ## Download Options

            ### CUDA Version (Recommended)
            For optimal performance on Windows and Linux, download the CUDA-enabled version (hosted on Hugging Face due to file size limits):
            - [Windows CUDA](https://huggingface.co/mmmfrieddough/minecraft-schematic-generator/resolve/${{ github.ref_name }}/binaries/minecraft-schematic-generator.exe)
            - [Linux CUDA](https://huggingface.co/mmmfrieddough/minecraft-schematic-generator/resolve/${{ github.ref_name }}/binaries/minecraft-schematic-generator-linux)

            **Note:** CUDA version requires an NVIDIA GPU but provides significantly faster inference.

            ### CPU Version
            For macOS systems (best performance on Apple Silicon):
            - [macOS](dist/minecraft-schematic-generator-mac/minecraft-schematic-generator-mac)

            CPU versions for Windows/Linux are available but not recommended due to extremely slow inference times:
            - [Windows CPU](dist/minecraft-schematic-generator.exe/minecraft-schematic-generator.exe)
            - [Linux CPU](dist/minecraft-schematic-generator-linux/minecraft-schematic-generator-linux)

            ## System Requirements
            - Windows/Linux: NVIDIA GPU strongly recommended
            - macOS: Apple Silicon recommended for best performance

            ## Server Configuration
            The server can be started with:
            ```bash
            ./minecraft-schematic-generator [options]
            ```

            By default, it will run on http://localhost:8000
          draft: false
          prerelease: false
          files: |
            dist/minecraft-schematic-generator*/minecraft-schematic-generator*
            dist/minecraft-schematic-generator-termux-arm64/minecraft-schematic-generator-termux-arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GIT }}
